#include <vector>
#include <iostream>
#include <cstdlib>
#include <cmath>
#include <cassert>

using namespace std;

// Struct to represent a connection
struct Connection {
    double weight;
    double deltaWeight;
};

class Neuron;

// Define a layer as a vector of neurons
typedef vector<Neuron> Layer;

class Neuron {
public:
    Neuron(unsigned numOutputs, unsigned myIndex);
    void setOutputVal(double val) { m_outputVal = val; }
    double getOutputVal(void) const { return m_outputVal; }
    void feedForward(const Layer &prevLayer);
    void calcOutputGradients(double targetVal);
    void calcHiddenGradients(const Layer &nextLayer);
    void updateInputWeights(Layer &prevLayer);
    vector<Connection> m_outputWeights;

private:
    static double eta;    // Overall net learning rate
    static double alpha;  // Momentum
    static double transferFunction(double x);
    static double transferFunctionDerivative(double x);
    static double randomWeight(void) { return rand() / double(RAND_MAX); }
    double sumDOW(const Layer &nextLayer) const;

    double m_outputVal;
    unsigned m_myIndex;
    double m_gradient;
};

// Static members initialization
double Neuron::eta = 0.15;   // Learning rate
double Neuron::alpha = 0.5; // Momentum

// Sigmoid activation function
double Neuron::transferFunction(double x) {
    return 1.0 / (1.0 + exp(-x));
}

// Derivative of sigmoid activation function
double Neuron::transferFunctionDerivative(double x) {
    double sigmoid = transferFunction(x);
    return sigmoid * (1.0 - sigmoid);
}

Neuron::Neuron(unsigned numOutputs, unsigned myIndex) {
    for (unsigned c = 0; c < numOutputs; ++c) {
        m_outputWeights.push_back(Connection());
        m_outputWeights.back().weight = randomWeight();
    }
    m_myIndex = myIndex;
}

void Neuron::feedForward(const Layer &prevLayer) {
    double sum = 0.0;

    for (unsigned n = 0; n < prevLayer.size(); ++n) {
        sum += prevLayer[n].getOutputVal() *
               prevLayer[n].m_outputWeights[m_myIndex].weight;
    }

    m_outputVal = Neuron::transferFunction(sum);
}

void Neuron::calcOutputGradients(double targetVal) {
    double delta = targetVal - m_outputVal;
    m_gradient = delta * Neuron::transferFunctionDerivative(m_outputVal);
}

void Neuron::calcHiddenGradients(const Layer &nextLayer) {
    double dow = sumDOW(nextLayer);
    m_gradient = dow * Neuron::transferFunctionDerivative(m_outputVal);
}

double Neuron::sumDOW(const Layer &nextLayer) const {
    double sum = 0.0;

    for (unsigned n = 0; n < nextLayer.size() - 1; ++n) {
        sum += m_outputWeights[n].weight * nextLayer[n].m_gradient;
    }

    return sum;
}

void Neuron::updateInputWeights(Layer &prevLayer) {
    for (unsigned n = 0; n < prevLayer.size(); ++n) {
        Neuron &neuron = prevLayer[n];
        double oldDeltaWeight = neuron.m_outputWeights[m_myIndex].deltaWeight;

        double newDeltaWeight =
            eta * neuron.getOutputVal() * m_gradient +
            alpha * oldDeltaWeight;

        neuron.m_outputWeights[m_myIndex].deltaWeight = newDeltaWeight;
        neuron.m_outputWeights[m_myIndex].weight += newDeltaWeight;
    }
}

// Net class
class Net {
public:
    Net(const vector<unsigned> &topology);
    void feedForward(const vector<double> &inputVals);
    void backProp(const vector<double> &targetVals);
    void getResults(vector<double> &resultVals) const;
    void printFinalWeights() const;

private:
    vector<Layer> m_layers; // m_layers[layerNum][neuronNum]
    double m_error;
};

Net::Net(const vector<unsigned> &topology) {
    unsigned numLayers = topology.size();
    for (unsigned layerNum = 0; layerNum < numLayers; ++layerNum) {
        m_layers.push_back(Layer());
        unsigned numOutputs = layerNum == topology.size() - 1 ? 0 : topology[layerNum + 1];

        for (unsigned neuronNum = 0; neuronNum <= topology[layerNum]; ++neuronNum) {
            m_layers.back().push_back(Neuron(numOutputs, neuronNum));
        }

        m_layers.back().back().setOutputVal(1.0); // Bias neuron
    }
}

void Net::feedForward(const vector<double> &inputVals) {
    for (unsigned i = 0; i < inputVals.size(); ++i) {
        m_layers[0][i].setOutputVal(inputVals[i]);
    }

    for (unsigned layerNum = 1; layerNum < m_layers.size(); ++layerNum) {
        Layer &prevLayer = m_layers[layerNum - 1];
        for (unsigned n = 0; n < m_layers[layerNum].size() - 1; ++n) {
            m_layers[layerNum][n].feedForward(prevLayer);
        }
    }
}

void Net::backProp(const vector<double> &targetVals) {
    Layer &outputLayer = m_layers.back();
    m_error = 0.0;

    for (unsigned n = 0; n < outputLayer.size() - 1; ++n) {
        double delta = targetVals[n] - outputLayer[n].getOutputVal();
        m_error += delta * delta;
    }
    m_error /= outputLayer.size() - 1;
    m_error = sqrt(m_error);

    for (unsigned n = 0; n < outputLayer.size() - 1; ++n) {
        outputLayer[n].calcOutputGradients(targetVals[n]);
    }

    for (unsigned layerNum = m_layers.size() - 2; layerNum > 0; --layerNum) {
        Layer &hiddenLayer = m_layers[layerNum];
        Layer &nextLayer = m_layers[layerNum + 1];

        for (unsigned n = 0; n < hiddenLayer.size(); ++n) {
            hiddenLayer[n].calcHiddenGradients(nextLayer);
        }
    }

    for (unsigned layerNum = m_layers.size() - 1; layerNum > 0; --layerNum) {
        Layer &layer = m_layers[layerNum];
        Layer &prevLayer = m_layers[layerNum - 1];

        for (unsigned n = 0; n < layer.size() - 1; ++n) {
            layer[n].updateInputWeights(prevLayer);
        }
    }
}

void Net::getResults(vector<double> &resultVals) const {
    resultVals.clear();
    for (unsigned n = 0; n < m_layers.back().size() - 1; ++n) {
        resultVals.push_back(m_layers.back()[n].getOutputVal());
    }
}

void Net::printFinalWeights() const {
    const Layer &hiddenLayer = m_layers[1];  // First hidden layer
    cout << "Final weights of the hidden layer neurons: " << endl;
    for (unsigned n = 0; n < hiddenLayer.size(); ++n) {
        for (unsigned c = 0; c < hiddenLayer[n].m_outputWeights.size(); ++c) {
            cout << "Neuron " << n << " to Neuron " << c << ": " << hiddenLayer[n].m_outputWeights[c].weight << endl;
        }
    }
}

void showVectorVals(string label, const vector<double> &v) {
    cout << label << " ";
    for (double val : v) {
        cout << val << " ";
    }
    cout << endl;
}

// Main function to test the neural network
int main() {
    vector<unsigned> topology = {3, 2, 1}; // Example topology: 3 inputs, 2 hidden neurons, 1 output
    Net myNet(topology);

    vector<double> inputVals(3);
    vector<double> targetVals(1);

    for (int epoch = 0; epoch < 500; ++epoch) {
        cout << "Epoch " << epoch + 1 << endl;

        cout << "Enter angle, net acceleration, and angular velocity: ";
        cin >> inputVals[0] >> inputVals[1] >> inputVals[2];

        myNet.feedForward(inputVals);

        cout << "Enter target value: ";
        cin >> targetVals[0];

        myNet.backProp(targetVals);
    }

    vector<double> resultVals;
    myNet.getResults(resultVals);

    showVectorVals("Outputs: ", resultVals);
    myNet.printFinalWeights();  // Print the final weights of hidden layer neurons

    return 0;
} 
